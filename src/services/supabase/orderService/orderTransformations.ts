
import { Order, OrderItem } from '@/types';

export class OrderTransformations {
  static transformFromDB(orderData: any): Order {
    return {
      id: orderData.id,
      code: orderData.code,
      customerId: orderData.customer_id || '',
      customerName: orderData.customer_name || '',
      customerCode: orderData.customer_code,
      salesRepId: orderData.sales_rep_id || '',
      salesRepName: orderData.sales_rep_name || '',
      date: new Date(orderData.date),
      dueDate: new Date(orderData.due_date || orderData.date),
      deliveryDate: orderData.delivery_date ? new Date(orderData.delivery_date) : undefined,
      items: orderData.items || [],
      total: Number(orderData.total || 0),
      discount: Number(orderData.discount || 0),
      status: orderData.status || 'pending',
      paymentStatus: orderData.payment_status || 'pending',
      paymentMethod: orderData.payment_method || '',
      paymentMethodId: orderData.payment_method_id || '',
      paymentTableId: orderData.payment_table_id || '',
      paymentTable: orderData.payment_table,
      payments: orderData.payments || [],
      notes: orderData.notes || '',
      createdAt: new Date(orderData.created_at),
      updatedAt: new Date(orderData.updated_at),
      archived: orderData.archived || false,
      deliveryAddress: orderData.delivery_address || '',
      deliveryCity: orderData.delivery_city || '',
      deliveryState: orderData.delivery_state || '',
      deliveryZip: orderData.delivery_zip || '',
      importStatus: orderData.import_status || 'pending',
      importedAt: orderData.imported_at ? new Date(orderData.imported_at) : undefined,
      importedBy: orderData.imported_by,
      sourceProject: orderData.source_project || 'admin',
      mobileOrderId: orderData.mobile_order_id,
      rejectionReason: orderData.rejection_reason,
      visitNotes: orderData.visit_notes
    };
  }

  static transformFromMobileOrder(mobileOrderData: any): Order {
    return {
      id: mobileOrderData.id,
      code: mobileOrderData.code,
      customerId: mobileOrderData.customer_id || '',
      customerName: mobileOrderData.customer_name || '',
      customerCode: mobileOrderData.customer_code,
      salesRepId: mobileOrderData.sales_rep_id || '',
      salesRepName: mobileOrderData.sales_rep_name || '',
      date: new Date(mobileOrderData.date),
      dueDate: new Date(mobileOrderData.due_date || mobileOrderData.date),
      deliveryDate: mobileOrderData.delivery_date ? new Date(mobileOrderData.delivery_date) : undefined,
      items: mobileOrderData.items || [],
      total: Number(mobileOrderData.total || 0),
      discount: Number(mobileOrderData.discount || 0),
      status: mobileOrderData.status || 'pending',
      paymentStatus: mobileOrderData.payment_status || 'pending',
      paymentMethod: mobileOrderData.payment_method || '',
      paymentMethodId: mobileOrderData.payment_method_id || '',
      paymentTableId: mobileOrderData.payment_table_id || '',
      paymentTable: mobileOrderData.payment_table,
      payments: mobileOrderData.payments || [],
      notes: mobileOrderData.notes || '',
      createdAt: new Date(mobileOrderData.created_at),
      updatedAt: new Date(mobileOrderData.updated_at),
      archived: false,
      deliveryAddress: mobileOrderData.delivery_address || '',
      deliveryCity: mobileOrderData.delivery_city || '',
      deliveryState: mobileOrderData.delivery_state || '',
      deliveryZip: mobileOrderData.delivery_zip || '',
      importStatus: mobileOrderData.imported_to_orders ? 'imported' : 'pending',
      importedAt: mobileOrderData.imported_at ? new Date(mobileOrderData.imported_at) : undefined,
      importedBy: mobileOrderData.imported_by,
      sourceProject: 'mobile',
      mobileOrderId: mobileOrderData.mobile_order_id || mobileOrderData.id,
      rejectionReason: mobileOrderData.rejection_reason,
      visitNotes: mobileOrderData.visit_notes
    };
  }

  static transformToDB(order: Order): any {
    return {
      id: order.id,
      code: order.code,
      customer_id: order.customerId,
      customer_name: order.customerName,
      sales_rep_id: order.salesRepId,
      sales_rep_name: order.salesRepName,
      date: order.date.toISOString(),
      due_date: order.dueDate.toISOString(),
      delivery_date: order.deliveryDate?.toISOString(),
      total: order.total,
      discount: order.discount,
      status: order.status,
      payment_status: order.paymentStatus,
      payment_method: order.paymentMethod,
      payment_method_id: order.paymentMethodId,
      payment_table_id: order.paymentTableId,
      payment_table: order.paymentTable,
      payments: order.payments,
      notes: order.notes,
      archived: order.archived,
      delivery_address: order.deliveryAddress,
      delivery_city: order.deliveryCity,
      delivery_state: order.deliveryState,
      delivery_zip: order.deliveryZip,
      import_status: order.importStatus,
      imported_at: order.importedAt?.toISOString(),
      imported_by: order.importedBy,
      source_project: order.sourceProject,
      mobile_order_id: order.mobileOrderId,
      rejection_reason: order.rejectionReason,
      visit_notes: order.visitNotes,
      updated_at: new Date().toISOString()
    };
  }
}
